{"ast":null,"code":"export const getAllTweetsService = async () => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}`);\n  const json = await response.json();\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n  return json.data;\n};\nexport const getSingleTweetService = async id => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/tweet/${id}`);\n  const json = await response.json();\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n  return json.data;\n};\nexport const registerUserService = async _ref => {\n  let {\n    email,\n    password\n  } = _ref;\n  const response = await fetch(\"${process.env.REACT_APP_BACKEND}/user\", {\n    method: \"POST \",\n    headers: {\n      \"Content-type\": \"Aplication/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const json = await response.json();\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n};\nexport const loginUserService = async _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n  const response = await fetch(\"${process.env.REACT_APP_BACKEND}/login\", {\n    method: \"POST \",\n    headers: {\n      \"Content-type\": \"Aplication/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const json = await response.json();\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n  return json.data;\n};\nexport const getMyDataService = async _ref3 => {\n  let {\n    token\n  } = _ref3;\n  const response = await fetch(\"${process.env.REACT_APP_BACKEND}/user\", {\n    headers: {\n      Authorization: token\n    }\n  });\n  const json = await response.json();\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n  return json.data;\n};","map":{"version":3,"names":["getAllTweetsService","response","fetch","process","env","REACT_APP_BACKEND","json","ok","Error","message","data","getSingleTweetService","id","registerUserService","_ref","email","password","method","headers","body","JSON","stringify","loginUserService","_ref2","getMyDataService","_ref3","token","Authorization"],"sources":["C:/Users/XoÃ¡n/Desktop/front-end/src/services/index.js"],"sourcesContent":["export const getAllTweetsService = async () => {\r\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}`);\r\n\r\n  const json = await response.json();\r\n  if (!response.ok) {\r\n    throw new Error(json.message);\r\n  }\r\n\r\n  return json.data;\r\n};\r\n\r\nexport const getSingleTweetService = async (id) => {\r\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/tweet/${id}`);\r\n\r\n  const json = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(json.message);\r\n  }\r\n  return json.data;\r\n};\r\n\r\nexport const registerUserService = async ({ email, password }) => {\r\n  const response = await fetch(\"${process.env.REACT_APP_BACKEND}/user\", {\r\n    method: \"POST \",\r\n    headers: {\r\n      \"Content-type\": \"Aplication/json\",\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n\r\n  const json = await response.json();\r\n  if (!response.ok) {\r\n    throw new Error(json.message);\r\n  }\r\n};\r\n\r\nexport const loginUserService = async ({ email, password }) => {\r\n  const response = await fetch(\"${process.env.REACT_APP_BACKEND}/login\", {\r\n    method: \"POST \",\r\n    headers: {\r\n      \"Content-type\": \"Aplication/json\",\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n\r\n  const json = await response.json();\r\n  if (!response.ok) {\r\n    throw new Error(json.message);\r\n  }\r\n  return json.data;\r\n};\r\n\r\nexport const getMyDataService = async ({ token }) => {\r\n  const response = await fetch(\"${process.env.REACT_APP_BACKEND}/user\", {\r\n    headers: {\r\n      Authorization: token,\r\n    },\r\n  });\r\n\r\n  const json = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(json.message);\r\n  }\r\n  return json.data;\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,EAAC,CAAC;EAEhE,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;EAC/B;EAEA,OAAOH,IAAI,CAACI,IAAI;AAClB,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,EAAE,IAAK;EACjD,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,UAASO,EAAG,EAAC,CAAC;EAE5E,MAAMN,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;EAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;EAC/B;EACA,OAAOH,IAAI,CAACI,IAAI;AAClB,CAAC;AAED,OAAO,MAAMG,mBAAmB,GAAG,MAAAC,IAAA,IAA+B;EAAA,IAAxB;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC3D,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;IACpEe,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EAEF,MAAMV,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;EAC/B;AACF,CAAC;AAED,OAAO,MAAMa,gBAAgB,GAAG,MAAAC,KAAA,IAA+B;EAAA,IAAxB;IAAER,KAAK;IAAEC;EAAS,CAAC,GAAAO,KAAA;EACxD,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;IACrEe,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EAEF,MAAMV,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;EAC/B;EACA,OAAOH,IAAI,CAACI,IAAI;AAClB,CAAC;AAED,OAAO,MAAMc,gBAAgB,GAAG,MAAAC,KAAA,IAAqB;EAAA,IAAd;IAAEC;EAAM,CAAC,GAAAD,KAAA;EAC9C,MAAMxB,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;IACpEgB,OAAO,EAAE;MACPS,aAAa,EAAED;IACjB;EACF,CAAC,CAAC;EAEF,MAAMpB,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;EAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;EAC/B;EACA,OAAOH,IAAI,CAACI,IAAI;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}